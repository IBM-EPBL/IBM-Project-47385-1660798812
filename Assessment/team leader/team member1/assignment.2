{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1.DOWNLOAD THE DATASET"
      ],
      "metadata": {
        "id": "1H3xRUVpbE-j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.LOAD THE DATA SET"
      ],
      "metadata": {
        "id": "LQKet6oBIWir"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "tTv_WwiuF_fA",
        "outputId": "cb229220-6e1d-454b-a9f7-6d1480aebe58"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
              "0          1    15634602  Hargrave          619    France  Female   42   \n",
              "1          2    15647311      Hill          608     Spain  Female   41   \n",
              "2          3    15619304      Onio          502    France  Female   42   \n",
              "3          4    15701354      Boni          699    France  Female   39   \n",
              "4          5    15737888  Mitchell          850     Spain  Female   43   \n",
              "\n",
              "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0       2       0.00              1          1               1   \n",
              "1       1   83807.86              1          0               1   \n",
              "2       8  159660.80              3          1               0   \n",
              "3       1       0.00              2          0               0   \n",
              "4       2  125510.82              1          1               1   \n",
              "\n",
              "   EstimatedSalary  Exited  \n",
              "0        101348.88       1  \n",
              "1        112542.58       0  \n",
              "2        113931.57       1  \n",
              "3         93826.63       0  \n",
              "4         79084.10       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd9eb057-67fa-4767-a45b-aa9162cc7a22\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd9eb057-67fa-4767-a45b-aa9162cc7a22')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dd9eb057-67fa-4767-a45b-aa9162cc7a22 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dd9eb057-67fa-4767-a45b-aa9162cc7a22');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv('/content/Churn_Modelling.csv')\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.PERFORM BELOW VISUALISATION"
      ],
      "metadata": {
        "id": "v0qFuMukIsN3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#univariant\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.scatter(df.index,df['Age'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "MzHoZ2rTu7lR",
        "outputId": "f2400cc7-3a82-419b-a8d9-dafef34d431d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5fa93572d0>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# bivariante\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.scatter(df['Gender'],df['Balance'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "FuEMG0G-I5KE",
        "outputId": "4206a2ce-0c32-4b06-fde6-94ed9e7e9d15"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5fa8e44710>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# multivariant\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.scatter(df['Age'],df['Balance'],df['Tenure'],df['RowNumber'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "KwnS3tuSsSM7",
        "outputId": "e6ac3664-709b-4014-f878-590f9dca8173"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5fa8e23f90>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.PERFORM DESCRIPTIVE STATISTICS ON THE DATASET"
      ],
      "metadata": {
        "id": "NpelglxVhKEh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv('/content/Churn_Modelling.csv')\n",
        "df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "GrFXdLG9hmpu",
        "outputId": "6f69383e-32d8-4024-bedf-f8f82e9e82d9"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         RowNumber    CustomerId   CreditScore           Age        Tenure  \\\n",
              "count  10000.00000  1.000000e+04  10000.000000  10000.000000  10000.000000   \n",
              "mean    5000.50000  1.569094e+07    650.528800     38.921800      5.012800   \n",
              "std     2886.89568  7.193619e+04     96.653299     10.487806      2.892174   \n",
              "min        1.00000  1.556570e+07    350.000000     18.000000      0.000000   \n",
              "25%     2500.75000  1.562853e+07    584.000000     32.000000      3.000000   \n",
              "50%     5000.50000  1.569074e+07    652.000000     37.000000      5.000000   \n",
              "75%     7500.25000  1.575323e+07    718.000000     44.000000      7.000000   \n",
              "max    10000.00000  1.581569e+07    850.000000     92.000000     10.000000   \n",
              "\n",
              "             Balance  NumOfProducts    HasCrCard  IsActiveMember  \\\n",
              "count   10000.000000   10000.000000  10000.00000    10000.000000   \n",
              "mean    76485.889288       1.530200      0.70550        0.515100   \n",
              "std     62397.405202       0.581654      0.45584        0.499797   \n",
              "min         0.000000       1.000000      0.00000        0.000000   \n",
              "25%         0.000000       1.000000      0.00000        0.000000   \n",
              "50%     97198.540000       1.000000      1.00000        1.000000   \n",
              "75%    127644.240000       2.000000      1.00000        1.000000   \n",
              "max    250898.090000       4.000000      1.00000        1.000000   \n",
              "\n",
              "       EstimatedSalary        Exited  \n",
              "count     10000.000000  10000.000000  \n",
              "mean     100090.239881      0.203700  \n",
              "std       57510.492818      0.402769  \n",
              "min          11.580000      0.000000  \n",
              "25%       51002.110000      0.000000  \n",
              "50%      100193.915000      0.000000  \n",
              "75%      149388.247500      0.000000  \n",
              "max      199992.480000      1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09615f44-ba31-473f-8a4d-07ff4c9eabb1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.00000</td>\n",
              "      <td>1.000000e+04</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.00000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5000.50000</td>\n",
              "      <td>1.569094e+07</td>\n",
              "      <td>650.528800</td>\n",
              "      <td>38.921800</td>\n",
              "      <td>5.012800</td>\n",
              "      <td>76485.889288</td>\n",
              "      <td>1.530200</td>\n",
              "      <td>0.70550</td>\n",
              "      <td>0.515100</td>\n",
              "      <td>100090.239881</td>\n",
              "      <td>0.203700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2886.89568</td>\n",
              "      <td>7.193619e+04</td>\n",
              "      <td>96.653299</td>\n",
              "      <td>10.487806</td>\n",
              "      <td>2.892174</td>\n",
              "      <td>62397.405202</td>\n",
              "      <td>0.581654</td>\n",
              "      <td>0.45584</td>\n",
              "      <td>0.499797</td>\n",
              "      <td>57510.492818</td>\n",
              "      <td>0.402769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.556570e+07</td>\n",
              "      <td>350.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.580000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2500.75000</td>\n",
              "      <td>1.562853e+07</td>\n",
              "      <td>584.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>51002.110000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5000.50000</td>\n",
              "      <td>1.569074e+07</td>\n",
              "      <td>652.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>97198.540000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>100193.915000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7500.25000</td>\n",
              "      <td>1.575323e+07</td>\n",
              "      <td>718.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>127644.240000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>149388.247500</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10000.00000</td>\n",
              "      <td>1.581569e+07</td>\n",
              "      <td>850.000000</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>250898.090000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>199992.480000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09615f44-ba31-473f-8a4d-07ff4c9eabb1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-09615f44-ba31-473f-8a4d-07ff4c9eabb1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-09615f44-ba31-473f-8a4d-07ff4c9eabb1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.boxplot(df['Balance'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "fU6UlZTFiWEp",
        "outputId": "77a23d83-442e-4bc5-878e-d06060f2870b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5fa8db5d50>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWMAAAEGCAYAAACw+/QIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAL0klEQVR4nO3dXaxl5V3H8d+/MwKDtAoOEjJtOtAhqY0XlU4MNaRGE9FyoyY1oVFLrEmNLxO80ATSm+qF1Saa4GgsNPZCbUxrlFiTGrC1iTeVdkaHlwrIQWlkwjvKSwaQDo8Xew3ZM84ZZmDO2v+Z8/kkk7PPs9c5z3rO2vNln7VnL2qMEQBW6y2r3gEAxBigBTEGaECMARoQY4AGtp7Kxtu3bx87d+7coF0BODvt37//qTHGxSfa5pRivHPnzuzbt+/N7RXAJlNV33q9bZymAGhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABk7p/4H3Ru3duzdra2tzTMWMDh48mCTZsWPHivfkaLt27cqePXtWvRtwSmaJ8draWg7ce18On3/RHNMxky2Hnk2SPPbyLA+jk7Ll0DOr3gV4Q2b7W3T4/Ivy4ruvnWs6ZrDt/i8lSavjemSf4EzjnDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA1vnmOTgwYN5y0uH5pgK4LTau3dvkmTPnj0bOs8sMX7xxRdTr74yx1QAp9Xa2tos8zhNAdCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNCAGAM0IMYADYgxQANiDNDA1lXvAJxOb3npuaytPZ8bbrhh1bvCWWJtbS3btm3b8Hle95lxVX2sqvZV1b4nn3xyw3cIYDN63WfGY4xbk9yaJLt37x4bvkfwJrx63tuy6/JLcvPNN696VzhLzPVblnPGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADYgzQgBgDNCDGAA2IMUADW+eYZNu2bXn+f8ccUwGcVrt27ZplnllivGPHjjz28uNzTAVwWu3Zs2eWeZymAGhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoAExBmhAjAEaEGOABsQYoIGtc0205dAz2Xb/l+aajhlsOfR0krQ6rlsOPZPkklXvBpyyWWK8a9euOaZhZgcPfjtJsmNHp/hd4vHGGWmWGO/Zs2eOaQDOWM4ZAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0IAYAzQgxgANiDFAA2IM0ECNMU5+46onk3zrDc61PclTb/Brz1Sbbc2bbb2JNW8Gp2O97xxjXHyiDU4pxm9GVe0bY+yeZbImNtuaN9t6E2veDOZar9MUAA2IMUADc8b41hnn6mKzrXmzrTex5s1glvXOds4YgPU5TQHQgBgDNLDhMa6qn6iqB6pqrapu3Oj5NkJVPVxV91TVgaraN41dVFX/UFUPTh8vnMarqv5wWu/dVXXl0ve5ftr+waq6fmn8fdP3X5u+tlawxs9W1RNVde/S2Iavcb05VrTeT1TVwek4H6iqa5fuu2na9weq6seXxo/7+K6qy6rqzmn881V1zjR+7vT52nT/zpnW+46q+mpV/VtVfbOqbpjGz+ZjvN6aex7nMcaG/UmyJclDSS5Pck6Su5K8ZyPn3KB1PJxk+zFjn0py43T7xiS/N92+NsnfJ6kkVyW5cxq/KMl/TB8vnG5fON339Wnbmr72gytY4weSXJnk3jnXuN4cK1rvJ5L8xnG2fc/02D03yWXTY3rLiR7fSb6Q5Lrp9qeT/PJ0+1eSfHq6fV2Sz8+03kuTXDndfmuSf5/WdTYf4/XW3PI4b/QP4/1Jbl/6/KYkN81xIE7zOh7O/4/xA0kuXTroD0y3b0ny4WO3S/LhJLcsjd8yjV2a5P6l8aO2m3mdO3N0nDZ8jevNsaL1rveX9KjHbZLbp8f2cR/fU4yeSrJ1Gn9tuyNfO93eOm1XKzjWf5vkx872Y7zOmlse540+TbEjyX8tff7INHamGUnuqKr9VfWxaeySMcaj0+3Hklwy3V5vzScaf+Q44x3Mscb15liVX5t+Lf/s0q/Tp7re70nyP2OMbx8zftT3mu5/dtp+NtOvzD+Q5M5skmN8zJqThsfZC3gn5+oxxpVJPpjkV6vqA8t3jsV//s7qfyM4xxob/Bz/JMm7krw3yaNJfn+F+7IhquqCJH+d5NfHGM8t33e2HuPjrLnlcd7oGB9M8o6lz98+jZ1RxhgHp49PJLktyQ8mebyqLk2S6eMT0+brrflE428/zngHc6xxvTlmN8Z4fIxxeIzxapLPZHGck1Nf79NJvruqth4zftT3mu7/rmn7DVdV35FFlD43xvibafisPsbHW3PX47zRMf5GkiumVxzPyeJE9hc3eM7Tqqq+s6reeuR2kmuS3JvFOo68knx9FuejMo1/ZHo1+qokz06/ot2e5JqqunD6teiaLM4vPZrkuaq6anr1+SNL32vV5ljjenPM7kgwJj+dxXFOFvt43fQK+WVJrsjixarjPr6nZ39fTfKh6euP/dkdWe+HkvzjtP2Gmn7uf5rkvjHGHyzdddYe4/XW3PY4z3DS/NosXsV8KMnHV3Hi/k3u/+VZvHp6V5JvHllDFud/vpLkwSRfTnLRNF5J/nha7z1Jdi99r48mWZv+/MLS+O7pAfFQkj/Kal7Q+cssfmV7JYtzX784xxrXm2NF6/3zaT13T3+ZLl3a/uPTvj+QpX/tst7je3rcfH36OfxVknOn8fOmz9em+y+fab1XZ3F64O4kB6Y/157lx3i9Nbc8zt4ODdCAF/AAGhBjgAbEGKABMQZoQIwBGhBjVqaqDk9Xzbqrqv6lqn7oJL7mhTn2Dea29fU3gQ3z4hjjvUkyXa7wk0l+eLW7BKvhmTFdvC3JfyeLawlU1VemZ8v3VNVPHrvxettU1c6quq+qPjNdw/aOqto23berqr689Ez8XdP4b1bVN6YLx/zWjGuG13jTBytTVYezeCfUeVlcWvFHxxj7p/fynz/GeK6qtif55yRXjDFGVb0wxrhgvW2SvDOLdz3tHmMcqKovZPHW1b+oqjuT/O4Y47aqOi+LJyNXZ/F21V/K4l1nX0zyqTHGP835swCnKVil5dMU70/yZ1X1/VlE8Xemq+O9msXlCC/J4vKLR6y3TZL85xjjwHR7f5Kd0/VFdowxbkuSMcZL07zXZHF9hX+dtr8gi6iLMbMSY1oYY3xteoZ7cRbXAbg4yfvGGK9U1cNZPHte9rMn2Oblpe0OJ9l2gqkrySfHGLe8+VXAG+ecMS1U1buz+N/bPJ3F5QafmCL7I1mcejjWyWzzmjHG80keqaqfmuY7t6rOz+IqZB+drnmbqtpRVd972hYGJ8kzY1ZpW1UdOZ1QSa4fYxyuqs8l+buquifJviT3H+drT2abY/18kluq6rezuFrbz4wx7qiq70vytcUVF/NCkp/LCq+rzObkBTyABpymAGhAjAEaEGOABsQYoAExBmhAjAEaEGOABv4PCI9t1psIJOIAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.boxplot(df['Age'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "v3Ltf6IEkmLa",
        "outputId": "02835395-12b3-4fbf-8924-33910e85744e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f5fa74b90d0>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPyUlEQVR4nO3da4xc9XmA8ee1t8HGTrnYQF2bdhNtAVEgBKMUCEUDMcXcQikGYXExEoIvlW2gqGrBNZgCEhK4IEupZEoLpG1SIGkpyJjYAUpbJKJdwv2STBs3scUthpCaW2r498M5s9lZNnjXHvadxc9PsuwzZ87M65njx2ePZ4+jlIIkafxNyh5AknZWBliSkhhgSUpigCUpiQGWpCQ9Y7nzzJkzS29v7yc0iiR9+sycOZMHH3zwwVLK/OHrxhTg3t5e+vv7OzeZJO0EImLmSLd7CkKSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSnJmP5POH28VatW0Ww2O/Z4mzZtAmD27Nkde8zR6OvrY/HixeP6nNLOyAB3ULPZ5MlnX+CDXffsyONNfuctAF55f/zepsnvvDFuzyXt7Axwh32w6568e8BJHXmsqS+uAejY443lOSV98jwHLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUnGJcCrVq1i1apV4/FU0rhwn1Yn9IzHkzSbzfF4GmncuE+rEzwFIUlJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAUgc0Go3BHyMtL1y4kEajwbnnnjuq+wOcddZZNBoNFi5cCMBpp51Go9Hg9NNPH/ExTzjhBBqNBvPnzwfg9NNPp9FocMYZZwCwZMkSGo0Gl1122Yjb33DDDTQaDW666SYArrjiChqNBsuXLx+cacWKFTQaDa677joA7r33XhqNBvfddx8ADz30EI1Gg4cffhiA/v5+jjvuOAYGBkZcv3nzZpYsWcLmzZtHXG42m5x88sk0m80R14/G9mwz1PAZOskAS+Pg5ZdfBmDjxo2j3ua1115r2/att94C4M033xzxMd9//30A3nvvvbb7tcLz9NNPA/DEE0+MuP0DDzwAMBjTxx57DIBHH310cKZWONetWwfAzTffDMDKlSsBuP766wEGA3311Vfz4YcfctVVV424/o477uCZZ57hzjvvHHH52muv5e233+baa68dcf1obM82Qw2foZMMsLSDhh61dmr5rLPO6uhjHnvssW3L8+bNa1tuHTW3nHnmmW3Ly5cvZ8WKFW23XXzxxZRSACilcOONN7J161YAtm7dym233caWLVsA2LJlC7feemvb+vvuu4+1a9dSSmHt2rU0m8225YGBATZs2ADAhg0bGBgYaFs/miPazZs3j3mboZrNZtsMnT4KjtYLOBqHH3546e/vH/OTLFiwgHfffZe+vr4xbzuRNJtN/vcXhbcPPbsjjzf1xTUAvHvASR15vNGY9uQ3+exn4lP/Xu2oZrPJ1KlTueeeez4SO41ORDB58mS2bt1KT08Pc+bMYePGjYPLU6ZMGQw4wPTp03nvvfcG15988slceumlH/scK1euZM2aNWPaZqgLLrhgMMAAvb293H777WP9rRIRA6WUw4ffvs0j4Ii4OCL6I6L/9ddfH/MTS9JISiltR8QbNmxoWx4aX6iOooeub50G+Tjr168f8zZDDY3vSMs7qmdbdyilrAZWQ3UEvD1PMnv2bABuueWW7dl8wli6dCkD//1q9hg75MMpv07f5/f51L9XO2rp0qXZI0x4O3oEfPzxx2/zOebNm9d2BDyabYbq7e39yBFwJ3kOWOpCe++9d0cfLyLalnt62o+9pkyZ0ra81157tS0fc8wxHzmPvN9++7Utn3LKKW3L5513XtvyOeec07Z82WWXMWlSlaDJkyezbNmytuXh55xXrFjRtv78889nWxYtWjTmbYZatmzZxy7vKAMs7aBHHnmk48t33XVXRx+z9emFlvXr17ctr127tm357rvvblu+5pprBj/J0LJ69erBsEcEl19++WDYe3p6uPDCC5k+fTpQHb1edNFFbetPPfVU5s+fT0Qwf/58+vr62pbnzp07eMTZ29vL3Llz29bPmDGDbZkxY8aYtxmqr6+vbYZO/9uIAZbGwaxZswCYM2fOqLdpHQW3tt1tt90A2GOPPUZ8zF122QX45dFs636t6BxyyCEAHHbYYSNuf+KJJwJw6qmnAnDUUUcB1dFvS+souPWl/CWXXAIw+NniK664AoArr7wSqD6GNmnSpMGj2eHrFy1axMEHHzx4ZDp8edmyZUybNm3wyHP4+tHYnm2GGj5DJ43LpyBa58s+7ecVW+eAO/WphYxPQUx9cQ1zPQe8TTvLPq3O2O5PQUiSPhkGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKS9IzHk/T19Y3H00jjxn1anTAuAV68ePF4PI00btyn1QmegpCkJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKYkBlqQkBliSkhhgSUpigCUpiQGWpCQGWJKSGGBJSmKAJSmJAZakJAZYkpIYYElKYoAlKUlP9gCfNpPfeYOpL67p0GNtBujY443uOd8A9hm355N2Zga4g/r6+jr6eJs2bQVg9uzxDOI+Hf99SBqZAe6gxYsXZ48gaQLxHLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSQywJCUxwJKUxABLUhIDLElJDLAkJTHAkpTEAEtSEgMsSUkMsCQlMcCSlMQAS1ISAyxJSaKUMvo7R7wO/M8nNMtM4Kef0GN3ijN2zkSY0xk7Y2ef8acApZT5w1eMKcCfpIjoL6Ucnj3Hx3HGzpkIczpjZzjjr+YpCElKYoAlKUk3BXh19gCj4IydMxHmdMbOcMZfoWvOAUvSzqabjoAlaadigCUpSUqAI2LfiHg4Ip6PiOciYml9+54RsS4iflj/vEfGfPUsUyLiexHxVD3jivr2z0XE4xHRjIh/iojPZM04ZNbJEfH9iLi/G2eMiA0R8UxEPBkR/fVtXfNe1/PsHhH3RMSLEfFCRBzZTTNGxP7169f68fOIuKSbZqznvLT+8/JsRHyj/nPUbfvj0nq+5yLikvq2lNcx6wh4K/AnpZQDgSOAP46IA4E/A75bSvkd4Lv1cpb3geNKKV8ADgXmR8QRwA3AX5VS+oA3gQsTZ2xZCrwwZLkbZzy2lHLokM9adtN7DXALsLaUcgDwBarXs2tmLKW8VL9+hwJzgXeAf+6mGSNiNrAEOLyUchAwGTibLtofI+Ig4CLgS1Tv8ykR0UfW61hKSf8B3AscD7wEzKpvmwW8lD1bPcuuwBPA71F9V0tPffuRwIPJs82pd5jjgPuB6MIZNwAzh93WNe81sBvwI+p/lO7GGYfN9QfAf3bbjMBs4CfAnkBPvT+e0E37I3AmcNuQ5b8A/jTrdUw/BxwRvcAXgceBfUopL9erXgH2SRoLGPzS/kngNWAd8F/Az0opW+u7bKTa6TLdTLUDfVgvz6D7ZizAdyJiICIurm/rpvf6c8DrwN/Vp3L+JiKm0V0zDnU28I36110zYyllE3Aj8GPgZeAtYIDu2h+fBX4/ImZExK7AScC+JL2OqQGOiOnAt4BLSik/H7quVH8VpX5GrpTyQam+5JtD9SXLAZnzDBcRpwCvlVIGsmfZhqNLKYcBJ1Kdbjpm6MoueK97gMOAvy6lfBF4m2FfgnbBjADU50+/Ctw9fF32jPV509Oo/kL7TWAa8JHrH2QqpbxAdUrkO8Ba4Engg2H3GbfXMS3AEfFrVPH9h1LKt+ubX42IWfX6WVRHnulKKT8DHqb68mn3iOipV80BNqUNBl8GvhoRG4BvUp2GuIXumrF1ZEQp5TWq85Zforve643AxlLK4/XyPVRB7qYZW04EniilvFovd9OM84AflVJeL6X8H/Btqn202/bH20opc0spx1Cdk/4BSa9j1qcgArgNeKGUsnLIqn8FFtW/XkR1bjhFROwVEbvXv55KdY76BaoQL6jvljpjKeXPSylzSim9VF+WPlRKOYcumjEipkXEZ1u/pjp/+Sxd9F6XUl4BfhIR+9c3fQV4ni6acYiF/PL0A3TXjD8GjoiIXes/463XsWv2R4CI2Lv++beAPwL+kazXMelE+NFUh/hPU30J8CTVuZgZVP+g9ENgPbBnxnz1jIcA369nfBZYXt/+eeB7QJPqy8BdsmYcNm8DuL/bZqxnear+8RxwZX1717zX9TyHAv31+/0vwB5dOOM0YDOw25Dbum3GFcCL9Z+ZrwO7dNP+WM/471R/MTwFfCXzdfRbkSUpSfqnICRpZ2WAJSmJAZakJAZYkpIYYElKYoA1IUTEH0ZEiYiu+m5EaUcYYE0UC4H/qH+WPhUMsLpefc2Qo6kuY3h2fdukiPhaff3edRGxJiIW1OvmRsS/1Rf/ebD1LaZStzHAmghOo7pW7w+AzRExl+pbSHuBA4HzqK7T0brGyCpgQSllLvC3wHUZQ0vb0rPtu0jpFlJdZAiqiw4tpNp37y6lfAi8EhEP1+v3Bw4C1lWXI2Ay1aURpa5jgNXVImJPqqu8HRwRhSqoheqqaiNuAjxXSjlynEaUtpunINTtFgBfL6X8dimlt5SyL9X/XvEGcEZ9LngfqosRQfU/G+wVEYOnJCLidzMGl7bFAKvbLeSjR7vfAn6D6jq+zwN/T/VfRr1VSvkFVbRviIinqK60d9T4jSuNnldD04QVEdNLKVsiYgbV5Q6/XKpr+0oTgueANZHdX180/zPAXxpfTTQeAUtSEs8BS1ISAyxJSQywJCUxwJKUxABLUpL/BwZAr0nebwYkAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5.HANDLE THE MISSING VALUES"
      ],
      "metadata": {
        "id": "DcXbSxG8kyQ6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Z1UhKCvk-3A",
        "outputId": "a616c473-2a6f-4ed5-93c3-c4846d96d98a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 14 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   RowNumber        10000 non-null  int64  \n",
            " 1   CustomerId       10000 non-null  int64  \n",
            " 2   Surname          10000 non-null  object \n",
            " 3   CreditScore      10000 non-null  int64  \n",
            " 4   Geography        10000 non-null  object \n",
            " 5   Gender           10000 non-null  object \n",
            " 6   Age              10000 non-null  int64  \n",
            " 7   Tenure           10000 non-null  int64  \n",
            " 8   Balance          10000 non-null  float64\n",
            " 9   NumOfProducts    10000 non-null  int64  \n",
            " 10  HasCrCard        10000 non-null  int64  \n",
            " 11  IsActiveMember   10000 non-null  int64  \n",
            " 12  EstimatedSalary  10000 non-null  float64\n",
            " 13  Exited           10000 non-null  int64  \n",
            "dtypes: float64(2), int64(9), object(3)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8J7vPJMzlMvq",
        "outputId": "121097ad-2aaf-41d8-88ae-df19b30f4ad5"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          0\n",
              "CustomerId         0\n",
              "Surname            0\n",
              "CreditScore        0\n",
              "Geography          0\n",
              "Gender             0\n",
              "Age                0\n",
              "Tenure             0\n",
              "Balance            0\n",
              "NumOfProducts      0\n",
              "HasCrCard          0\n",
              "IsActiveMember     0\n",
              "EstimatedSalary    0\n",
              "Exited             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6.FIND THE OUTLIERS AND REPLACE THE OUTLIERS"
      ],
      "metadata": {
        "id": "I_-CVTOHm58h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=df['Balance'].quantile(0.25)\n",
        "Q3=df['Balance'].quantile(0.75)\n",
        "IQR=Q3-Q1\n",
        "whisker_width=1.5\n",
        "Balance_outliers=df[(df['Balance']<1-whisker_width*IQR)|(df['Balance']>Q3+whisker_width*IQR)]\n",
        "Balance_outliers.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "id": "vV4ZuXodwDDU",
        "outputId": "80e3dc3b-6036-44e3-d7e9-06a56e885061"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [RowNumber, CustomerId, Surname, CreditScore, Geography, Gender, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary, Exited]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f1d08b45-4249-4bd4-abb4-5f7463885d15\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1d08b45-4249-4bd4-abb4-5f7463885d15')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f1d08b45-4249-4bd4-abb4-5f7463885d15 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f1d08b45-4249-4bd4-abb4-5f7463885d15');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7.CHECK FOR CCATEGORIAL COLUMNS AND PERFORM ENCODING.\n",
        "\n"
      ],
      "metadata": {
        "id": "E92fjyJkLfZz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing  import LabelEncoder\n",
        "le=LabelEncoder()\n",
        "df['Surname'],df['Geography'],df['Gender']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jyvnpfOeMZHk",
        "outputId": "f716770b-5259-4b3f-cac4-ef85994a6d02"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0        Hargrave\n",
              " 1            Hill\n",
              " 2            Onio\n",
              " 3            Boni\n",
              " 4        Mitchell\n",
              "           ...    \n",
              " 9995     Obijiaku\n",
              " 9996    Johnstone\n",
              " 9997          Liu\n",
              " 9998    Sabbatini\n",
              " 9999       Walker\n",
              " Name: Surname, Length: 10000, dtype: object, 0        France\n",
              " 1         Spain\n",
              " 2        France\n",
              " 3        France\n",
              " 4         Spain\n",
              "          ...   \n",
              " 9995     France\n",
              " 9996     France\n",
              " 9997     France\n",
              " 9998    Germany\n",
              " 9999     France\n",
              " Name: Geography, Length: 10000, dtype: object, 0       Female\n",
              " 1       Female\n",
              " 2       Female\n",
              " 3       Female\n",
              " 4       Female\n",
              "          ...  \n",
              " 9995      Male\n",
              " 9996      Male\n",
              " 9997    Female\n",
              " 9998      Male\n",
              " 9999    Female\n",
              " Name: Gender, Length: 10000, dtype: object)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Surname']= le.fit_transform (df['Surname'])\n",
        "df['Geography']= le.fit_transform(df['Geography'])\n",
        "df['Gender']= le.fit_transform(df['Gender'])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "qBR9ASJSOU0T",
        "outputId": "aceac0a2-efb5-41cc-8551-717f626c1d57"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId  Surname  CreditScore  Geography  Gender  Age  \\\n",
              "0          1    15634602     1115          619          0       0   42   \n",
              "1          2    15647311     1177          608          2       0   41   \n",
              "2          3    15619304     2040          502          0       0   42   \n",
              "3          4    15701354      289          699          0       0   39   \n",
              "4          5    15737888     1822          850          2       0   43   \n",
              "\n",
              "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0       2       0.00              1          1               1   \n",
              "1       1   83807.86              1          0               1   \n",
              "2       8  159660.80              3          1               0   \n",
              "3       1       0.00              2          0               0   \n",
              "4       2  125510.82              1          1               1   \n",
              "\n",
              "   EstimatedSalary  Exited  \n",
              "0        101348.88       1  \n",
              "1        112542.58       0  \n",
              "2        113931.57       1  \n",
              "3         93826.63       0  \n",
              "4         79084.10       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3c58fbb-7cb2-4e2a-9d0b-fbac39dcf7ae\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>1115</td>\n",
              "      <td>619</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>1177</td>\n",
              "      <td>608</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>2040</td>\n",
              "      <td>502</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>289</td>\n",
              "      <td>699</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>1822</td>\n",
              "      <td>850</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3c58fbb-7cb2-4e2a-9d0b-fbac39dcf7ae')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a3c58fbb-7cb2-4e2a-9d0b-fbac39dcf7ae button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a3c58fbb-7cb2-4e2a-9d0b-fbac39dcf7ae');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8.SPLIT THE DATA INTO DEPENDENT COLUMNS AND INDEPENDENT VARIABLES"
      ],
      "metadata": {
        "id": "XqwTTVdERKRi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv('/content/Churn_Modelling.csv')\n",
        "x = df.iloc[ : ,0:8]\n",
        "y = df.iloc[ : ,8:9]\n"
      ],
      "metadata": {
        "id": "SLbp3jEERqGn"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "2D6eB0wHSWua",
        "outputId": "ef29d063-62a1-4984-a677-e88f89683558"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId    Surname  CreditScore Geography  Gender  Age  \\\n",
              "0             1    15634602   Hargrave          619    France  Female   42   \n",
              "1             2    15647311       Hill          608     Spain  Female   41   \n",
              "2             3    15619304       Onio          502    France  Female   42   \n",
              "3             4    15701354       Boni          699    France  Female   39   \n",
              "4             5    15737888   Mitchell          850     Spain  Female   43   \n",
              "...         ...         ...        ...          ...       ...     ...  ...   \n",
              "9995       9996    15606229   Obijiaku          771    France    Male   39   \n",
              "9996       9997    15569892  Johnstone          516    France    Male   35   \n",
              "9997       9998    15584532        Liu          709    France  Female   36   \n",
              "9998       9999    15682355  Sabbatini          772   Germany    Male   42   \n",
              "9999      10000    15628319     Walker          792    France  Female   28   \n",
              "\n",
              "      Tenure  \n",
              "0          2  \n",
              "1          1  \n",
              "2          8  \n",
              "3          1  \n",
              "4          2  \n",
              "...      ...  \n",
              "9995       5  \n",
              "9996      10  \n",
              "9997       7  \n",
              "9998       3  \n",
              "9999       4  \n",
              "\n",
              "[10000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f0e4bcc-1db7-49e5-b85f-e3b7a990584d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>9996</td>\n",
              "      <td>15606229</td>\n",
              "      <td>Obijiaku</td>\n",
              "      <td>771</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>39</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>9997</td>\n",
              "      <td>15569892</td>\n",
              "      <td>Johnstone</td>\n",
              "      <td>516</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>9998</td>\n",
              "      <td>15584532</td>\n",
              "      <td>Liu</td>\n",
              "      <td>709</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>36</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>9999</td>\n",
              "      <td>15682355</td>\n",
              "      <td>Sabbatini</td>\n",
              "      <td>772</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>42</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>10000</td>\n",
              "      <td>15628319</td>\n",
              "      <td>Walker</td>\n",
              "      <td>792</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f0e4bcc-1db7-49e5-b85f-e3b7a990584d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0f0e4bcc-1db7-49e5-b85f-e3b7a990584d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0f0e4bcc-1db7-49e5-b85f-e3b7a990584d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "YwxSBg05ScdM",
        "outputId": "91cd0afa-82bb-4671-8164-25aa005fe2a7"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Balance\n",
              "0          0.00\n",
              "1      83807.86\n",
              "2     159660.80\n",
              "3          0.00\n",
              "4     125510.82\n",
              "...         ...\n",
              "9995       0.00\n",
              "9996   57369.61\n",
              "9997       0.00\n",
              "9998   75075.31\n",
              "9999  130142.79\n",
              "\n",
              "[10000 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-adb38ee4-ceaf-4d5e-9b54-0adb7d8580dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Balance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>83807.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>159660.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>125510.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>57369.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>75075.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>130142.79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adb38ee4-ceaf-4d5e-9b54-0adb7d8580dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-adb38ee4-ceaf-4d5e-9b54-0adb7d8580dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-adb38ee4-ceaf-4d5e-9b54-0adb7d8580dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9.SCALE THE INDEPENDENT VARIABLES"
      ],
      "metadata": {
        "id": "8xG_TjI3Tcsv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "sc=StandardScaler()\n",
        "x=sc.fit_transform(x)\n",
        "x=sc.transform(x)\n",
        "y=sc.fit_transform(x)\n",
        "y=sc.transform(y)\n",
        "from sklearn.cross_validation import train_test_split\n",
        "xtrain,xtest,ytrain,ytest=train_test_split(x_new, encoded 2,test_size=0.25,random_state=0)"
      ],
      "metadata": {
        "id": "LYjUYvxMTd0R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "10.SPLIT THE DATA INTO TRAINING AND TESTING"
      ],
      "metadata": {
        "id": "fJ3Xw-i9Te2B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection  import train_test_split\n",
        "xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.3,random_state=0)\n",
        "xtrain.shape,xtest.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l8HZxpNJTyKT",
        "outputId": "2f7714f9-6a78-4019-b026-9aa865cace03"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((7000, 8), (3000, 8))"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    }
  ]
}
